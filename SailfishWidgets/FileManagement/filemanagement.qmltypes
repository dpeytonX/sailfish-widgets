import QtQuick.tooling 1.1

// There always is a single Module object that contains all
// Component objects.
Module {
    // A Component object directly corresponds to a type exported
    // in a plugin with a call to qmlRegisterType.
    Component {

        // The name is a unique identifier used to refer to this type.
        // It is recommended you simply use the C++ type name.
        name: "Dir"

        // The name of the prototype Component.
        prototype: "QObject"

        // The list of exports determines how a type can be imported.
        // Each string has the format "URI/Name version" and matches the
        // arguments to qmlRegisterType. Usually types are only exported
        // once, if at all.
        // If the "URI/" part of the string is missing that means the
        // type should be put into the package defined by the URI the
        // module was imported with.
        // For example if this module was imported with 'import Foo 4.8'
        // the Animation object would be found in the package Foo and
        // QtQuick.
        exports: [
            "FileManagement 1.2",
            "SailfishWidgets/FileManagement 1.2"
        ]

        // The meta object revisions for the exports specified in 'exports'.
        // Describes with revisioned properties will be visible in an export.
        // The list must have exactly the same length as the 'exports' list.
        // For example the 'animations' propery described below will only be
        // available through the QtQuick/Animation 1.0 export.

        //In other words, the package import version will receive all features up to and including the
        //specified revision
        exportMetaObjectRevisions: [0, 0]

        //TODO
        Property {
            name: "applicationName";
            type: "string"
        }
        Property {
            name: "fileName";
            type: "string"
        }
        
        Signal { name: "settingsInitialized" }
    }

    // A Component object directly corresponds to a type exported
    // in a plugin with a call to qmlRegisterType.
    Component {

        // The name is a unique identifier used to refer to this type.
        // It is recommended you simply use the C++ type name.
        name: "File"

        // The name of the prototype Component.
        prototype: "QObject"

        // The list of exports determines how a type can be imported.
        // Each string has the format "URI/Name version" and matches the
        // arguments to qmlRegisterType. Usually types are only exported
        // once, if at all.
        // If the "URI/" part of the string is missing that means the
        // type should be put into the package defined by the URI the
        // module was imported with.
        // For example if this module was imported with 'import Foo 4.8'
        // the Animation object would be found in the package Foo and
        // QtQuick.
        exports: [
            "FileManagement 1.2",
            "SailfishWidgets/FileManagement 1.2"
        ]

        // The meta object revisions for the exports specified in 'exports'.
        // Describes with revisioned properties will be visible in an export.
        // The list must have exactly the same length as the 'exports' list.
        // For example the 'animations' propery described below will only be
        // available through the QtQuick/Animation 1.0 export.

        //In other words, the package import version will receive all features up to and including the
        //specified revision
        exportMetaObjectRevisions: [0, 0]

        //TODO
        Property {
            name: "applicationName";
            type: "string"
        }
        Property {
            name: "fileName";
            type: "string"
        }
        
        Signal { name: "settingsInitialized" }
    }
}
